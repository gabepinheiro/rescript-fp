/*
 * First-Class e High-Order Functions
 * 1. O que √© "first-class" ?
      - First Class significa que a fun√ß√£o √© um recurso tratada como qualquer outro valor
        Assim como string ou int pode ser passado como argumento, ser atribuido numa vari√°vel, manipulado por uma fun√ß√£o, retorn√°vel por uma fun√ß√£o...
          Com fun√ß√µes podemos fazer a mesma coisa, pois √© tratado como um "recurso first-class" da linguagem.

 * 2. O que s√£o "first-class" functions ?
        Nada mais s√£o do que fun√ß√µes sendo tratadas como valores. First Class-> sendo tratado como string, int, boolean...

 * 3. O que s√£o "high-order" functions ?
      - Toda High Order Function √© uma First Class Function
      - High Order Functions basicamente s√£o fun√ß√µes que recebem outras fun√ß√µes como argumento
      e/ou
       - Retornam uma outra fun√ß√£o
       - Ex: useEffect do React √© uma high order function.

 * 4. Exemplos de FCF (first-class functions)
 * 5. Exemplos de HOF (high-order functions)
 * 6. Rela√ß√£o com updates imut√°veis em arrays (map, filter e reduce)
 */

// String um recurso first class
let name = "Alonzo"
let sayHello = name => Js.log(`Hello, ${name}`)
sayHello(name)

// Fun√ß√µes tamb√©m √© um recurso first-class no ReScript, assim como no Js
// Exemplo com Promises, onde temos a fun√ß√£o .then que recebe uma fun√ß√£o como parametro
let printResult = result => Js.log(result)
//promise.then(printResult)

// First Class Functions
let sum = (a, b) => a + b
let sub = (a, b) => a - b

//High Order Function, que √© tbm √© ao mesmo tempo uma First Class Function
let executeOperation = (a, operation) => operation(a, 1)
executeOperation(5, sum)->ignore // 6
executeOperation(6, sub)->ignore //5

Js.Global.setTimeout(() => {
  Js.log("Hey....")
}, 1000)->ignore

// Fazendo uso de argumentos nomeados
let executeFn = (name, fn) => {
  fn(~message=`Hello, ${name}`)
}
executeFn("Alonzo", (~message) => {
  Js.log(message)
})

// High Order Functions: Metodos de Array (map, filter e reduce)
type person = {name: string, age: int}
let people = [
  {name: "Alonzo", age: 32},
  {name: "Turing", age: 36},
  {name: "Levi", age: 25},
  {name: "Eren", age: 23},
]
let people2 = people->Js.Array2.map(person => person.name)
Js.log2("People: ", people)
Js.log2("People2: ", people2)

let only30 = people->Js.Array2.filter(person => person.age >= 30)
Js.log2("Only30: ", only30)

@react.component
let make = () => {
  // High Order Function
  // Passando uma fun√ß√£o diretamente no argumento da Fun√ß√£o useEffect
  /* React.useEffect(() => { */
  /* return () => {...} */ // Retornando uma fun√ß√£o
  /* }, []) */

  <div>
    <h1> {`Hello from React + ReScript and Vite üòÉ`->React.string} </h1>
  </div>
}
